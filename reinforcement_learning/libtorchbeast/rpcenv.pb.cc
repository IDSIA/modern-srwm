// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcenv.proto

#include "rpcenv.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_rpcenv_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NDArray_rpcenv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpcenv_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ArrayNest_rpcenv_2eproto;
namespace rpcenv {
class ActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Action> _instance;
} _Action_default_instance_;
class NDArrayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NDArray> _instance;
} _NDArray_default_instance_;
class ArrayNest_MapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArrayNest_MapEntry_DoNotUse> _instance;
} _ArrayNest_MapEntry_DoNotUse_default_instance_;
class ArrayNestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArrayNest> _instance;
} _ArrayNest_default_instance_;
class StepDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Step> _instance;
} _Step_default_instance_;
}  // namespace rpcenv
static void InitDefaultsAction_rpcenv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpcenv::_Action_default_instance_;
    new (ptr) ::rpcenv::Action();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpcenv::Action::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Action_rpcenv_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAction_rpcenv_2eproto}, {
      &scc_info_ArrayNest_rpcenv_2eproto.base,}};

static void InitDefaultsNDArray_rpcenv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpcenv::_NDArray_default_instance_;
    new (ptr) ::rpcenv::NDArray();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpcenv::NDArray::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NDArray_rpcenv_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNDArray_rpcenv_2eproto}, {}};

static void InitDefaultsArrayNest_rpcenv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpcenv::_ArrayNest_MapEntry_DoNotUse_default_instance_;
    new (ptr) ::rpcenv::ArrayNest_MapEntry_DoNotUse();
  }
  {
    void* ptr = &::rpcenv::_ArrayNest_default_instance_;
    new (ptr) ::rpcenv::ArrayNest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpcenv::ArrayNest_MapEntry_DoNotUse::InitAsDefaultInstance();
  ::rpcenv::ArrayNest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ArrayNest_rpcenv_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsArrayNest_rpcenv_2eproto}, {
      &scc_info_NDArray_rpcenv_2eproto.base,}};

static void InitDefaultsStep_rpcenv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpcenv::_Step_default_instance_;
    new (ptr) ::rpcenv::Step();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rpcenv::Step::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Step_rpcenv_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStep_rpcenv_2eproto}, {
      &scc_info_ArrayNest_rpcenv_2eproto.base,}};

void InitDefaults_rpcenv_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Action_rpcenv_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NDArray_rpcenv_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ArrayNest_rpcenv_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Step_rpcenv_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_rpcenv_2eproto[5];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_rpcenv_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_rpcenv_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_rpcenv_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::rpcenv::Action, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpcenv::Action, action_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::Action, nest_action_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::rpcenv::NDArray, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::NDArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpcenv::NDArray, dtype_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::NDArray, shape_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::NDArray, data_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::rpcenv::ArrayNest_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::ArrayNest_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpcenv::ArrayNest_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::ArrayNest_MapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::rpcenv::ArrayNest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::ArrayNest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpcenv::ArrayNest, array_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::ArrayNest, vector_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::ArrayNest, map_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::rpcenv::Step, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::Step, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpcenv::Step, observation_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::Step, reward_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::Step, done_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::Step, episode_step_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::Step, episode_return_),
  0,
  1,
  2,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::rpcenv::Action)},
  { 9, 17, sizeof(::rpcenv::NDArray)},
  { 20, 27, sizeof(::rpcenv::ArrayNest_MapEntry_DoNotUse)},
  { 29, 37, sizeof(::rpcenv::ArrayNest)},
  { 40, 50, sizeof(::rpcenv::Step)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::rpcenv::_Action_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rpcenv::_NDArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rpcenv::_ArrayNest_MapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rpcenv::_ArrayNest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rpcenv::_Step_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_rpcenv_2eproto = {
  {}, AddDescriptors_rpcenv_2eproto, "rpcenv.proto", schemas,
  file_default_instances, TableStruct_rpcenv_2eproto::offsets,
  file_level_metadata_rpcenv_2eproto, 5, file_level_enum_descriptors_rpcenv_2eproto, file_level_service_descriptors_rpcenv_2eproto,
};

const char descriptor_table_protodef_rpcenv_2eproto[] =
  "\n\014rpcenv.proto\022\006rpcenv\"@\n\006Action\022\016\n\006acti"
  "on\030\001 \001(\005\022&\n\013nest_action\030\002 \001(\0132\021.rpcenv.A"
  "rrayNest\"9\n\007NDArray\022\r\n\005dtype\030\001 \001(\005\022\021\n\005sh"
  "ape\030\002 \003(\003B\002\020\001\022\014\n\004data\030\003 \001(\014\"\266\001\n\tArrayNes"
  "t\022\036\n\005array\030\001 \001(\0132\017.rpcenv.NDArray\022!\n\006vec"
  "tor\030\002 \003(\0132\021.rpcenv.ArrayNest\022\'\n\003map\030\003 \003("
  "\0132\032.rpcenv.ArrayNest.MapEntry\032=\n\010MapEntr"
  "y\022\013\n\003key\030\001 \001(\t\022 \n\005value\030\002 \001(\0132\021.rpcenv.A"
  "rrayNest:\0028\001\"z\n\004Step\022&\n\013observation\030\001 \001("
  "\0132\021.rpcenv.ArrayNest\022\016\n\006reward\030\002 \001(\002\022\014\n\004"
  "done\030\003 \001(\010\022\024\n\014episode_step\030\004 \001(\005\022\026\n\016epis"
  "ode_return\030\005 \001(\0022B\n\014RPCEnvServer\0222\n\014Stre"
  "amingEnv\022\016.rpcenv.Action\032\014.rpcenv.Step\"\000"
  "(\0010\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_rpcenv_2eproto = {
  false, InitDefaults_rpcenv_2eproto, 
  descriptor_table_protodef_rpcenv_2eproto,
  "rpcenv.proto", &assign_descriptors_table_rpcenv_2eproto, 524,
};

void AddDescriptors_rpcenv_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_rpcenv_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rpcenv_2eproto = []() { AddDescriptors_rpcenv_2eproto(); return true; }();
namespace rpcenv {

// ===================================================================

void Action::InitAsDefaultInstance() {
  ::rpcenv::_Action_default_instance_._instance.get_mutable()->nest_action_ = const_cast< ::rpcenv::ArrayNest*>(
      ::rpcenv::ArrayNest::internal_default_instance());
}
class Action::HasBitSetters {
 public:
  static void set_has_action(Action* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::rpcenv::ArrayNest& nest_action(const Action* msg);
  static void set_has_nest_action(Action* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::rpcenv::ArrayNest&
Action::HasBitSetters::nest_action(const Action* msg) {
  return *msg->nest_action_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Action::kActionFieldNumber;
const int Action::kNestActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Action::Action()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpcenv.Action)
}
Action::Action(const Action& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_nest_action()) {
    nest_action_ = new ::rpcenv::ArrayNest(*from.nest_action_);
  } else {
    nest_action_ = nullptr;
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:rpcenv.Action)
}

void Action::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Action_rpcenv_2eproto.base);
  ::memset(&nest_action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&nest_action_)) + sizeof(action_));
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:rpcenv.Action)
  SharedDtor();
}

void Action::SharedDtor() {
  if (this != internal_default_instance()) delete nest_action_;
}

void Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Action& Action::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Action_rpcenv_2eproto.base);
  return *internal_default_instance();
}


void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:rpcenv.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(nest_action_ != nullptr);
    nest_action_->Clear();
  }
  action_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Action::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Action*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 action = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_action(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .rpcenv.ArrayNest nest_action = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::rpcenv::ArrayNest::_InternalParse;
        object = msg->mutable_nest_action();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpcenv.Action)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_action(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .rpcenv.ArrayNest nest_action = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nest_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpcenv.Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpcenv.Action)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpcenv.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 action = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->action(), output);
  }

  // optional .rpcenv.ArrayNest nest_action = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::nest_action(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpcenv.Action)
}

::google::protobuf::uint8* Action::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpcenv.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 action = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->action(), target);
  }

  // optional .rpcenv.ArrayNest nest_action = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::nest_action(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpcenv.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpcenv.Action)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .rpcenv.ArrayNest nest_action = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *nest_action_);
    }

    // optional int32 action = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Action::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpcenv.Action)
  GOOGLE_DCHECK_NE(&from, this);
  const Action* source =
      ::google::protobuf::DynamicCastToGenerated<Action>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpcenv.Action)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpcenv.Action)
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpcenv.Action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_nest_action()->::rpcenv::ArrayNest::MergeFrom(from.nest_action());
    }
    if (cached_has_bits & 0x00000002u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Action::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpcenv.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpcenv.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::Swap(Action* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Action::InternalSwap(Action* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(nest_action_, other->nest_action_);
  swap(action_, other->action_);
}

::google::protobuf::Metadata Action::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_rpcenv_2eproto);
  return ::file_level_metadata_rpcenv_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NDArray::InitAsDefaultInstance() {
}
class NDArray::HasBitSetters {
 public:
  static void set_has_dtype(NDArray* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_data(NDArray* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NDArray::kDtypeFieldNumber;
const int NDArray::kShapeFieldNumber;
const int NDArray::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NDArray::NDArray()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpcenv.NDArray)
}
NDArray::NDArray(const NDArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:rpcenv.NDArray)
}

void NDArray::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NDArray_rpcenv_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dtype_ = 0;
}

NDArray::~NDArray() {
  // @@protoc_insertion_point(destructor:rpcenv.NDArray)
  SharedDtor();
}

void NDArray::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NDArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NDArray& NDArray::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NDArray_rpcenv_2eproto.base);
  return *internal_default_instance();
}


void NDArray::Clear() {
// @@protoc_insertion_point(message_clear_start:rpcenv.NDArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  dtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NDArray::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NDArray*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 dtype = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_dtype(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int64 shape = 2 [packed = true];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt64Parser;
          object = msg->mutable_shape();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          msg->add_shape(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      // optional bytes data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NDArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpcenv.NDArray)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dtype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_dtype(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 shape = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_shape())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18u, input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpcenv.NDArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpcenv.NDArray)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NDArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpcenv.NDArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dtype = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dtype(), output);
  }

  // repeated int64 shape = 2 [packed = true];
  if (this->shape_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_shape_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->shape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->shape(i), output);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpcenv.NDArray)
}

::google::protobuf::uint8* NDArray::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpcenv.NDArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dtype = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dtype(), target);
  }

  // repeated int64 shape = 2 [packed = true];
  if (this->shape_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _shape_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->shape_, target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpcenv.NDArray)
  return target;
}

size_t NDArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpcenv.NDArray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 shape = 2 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 dtype = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dtype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NDArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpcenv.NDArray)
  GOOGLE_DCHECK_NE(&from, this);
  const NDArray* source =
      ::google::protobuf::DynamicCastToGenerated<NDArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpcenv.NDArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpcenv.NDArray)
    MergeFrom(*source);
  }
}

void NDArray::MergeFrom(const NDArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpcenv.NDArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      dtype_ = from.dtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NDArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpcenv.NDArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NDArray::CopyFrom(const NDArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpcenv.NDArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NDArray::IsInitialized() const {
  return true;
}

void NDArray::Swap(NDArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NDArray::InternalSwap(NDArray* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  shape_.InternalSwap(&other->shape_);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dtype_, other->dtype_);
}

::google::protobuf::Metadata NDArray::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_rpcenv_2eproto);
  return ::file_level_metadata_rpcenv_2eproto[kIndexInFileMessages];
}


// ===================================================================

ArrayNest_MapEntry_DoNotUse::ArrayNest_MapEntry_DoNotUse() {}
ArrayNest_MapEntry_DoNotUse::ArrayNest_MapEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void ArrayNest_MapEntry_DoNotUse::MergeFrom(const ArrayNest_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata ArrayNest_MapEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_rpcenv_2eproto);
  return ::file_level_metadata_rpcenv_2eproto[2];
}
void ArrayNest_MapEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ArrayNest_MapEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      ArrayNest_MapEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormat::PARSE,
    "rpcenv.ArrayNest.MapEntry.key");
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void ArrayNest::InitAsDefaultInstance() {
  ::rpcenv::_ArrayNest_default_instance_._instance.get_mutable()->array_ = const_cast< ::rpcenv::NDArray*>(
      ::rpcenv::NDArray::internal_default_instance());
}
class ArrayNest::HasBitSetters {
 public:
  static const ::rpcenv::NDArray& array(const ArrayNest* msg);
  static void set_has_array(ArrayNest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::rpcenv::NDArray&
ArrayNest::HasBitSetters::array(const ArrayNest* msg) {
  return *msg->array_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArrayNest::kArrayFieldNumber;
const int ArrayNest::kVectorFieldNumber;
const int ArrayNest::kMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArrayNest::ArrayNest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpcenv.ArrayNest)
}
ArrayNest::ArrayNest(const ArrayNest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      vector_(from.vector_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  if (from.has_array()) {
    array_ = new ::rpcenv::NDArray(*from.array_);
  } else {
    array_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rpcenv.ArrayNest)
}

void ArrayNest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ArrayNest_rpcenv_2eproto.base);
  array_ = nullptr;
}

ArrayNest::~ArrayNest() {
  // @@protoc_insertion_point(destructor:rpcenv.ArrayNest)
  SharedDtor();
}

void ArrayNest::SharedDtor() {
  if (this != internal_default_instance()) delete array_;
}

void ArrayNest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArrayNest& ArrayNest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ArrayNest_rpcenv_2eproto.base);
  return *internal_default_instance();
}


void ArrayNest::Clear() {
// @@protoc_insertion_point(message_clear_start:rpcenv.ArrayNest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vector_.Clear();
  map_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(array_ != nullptr);
    array_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ArrayNest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ArrayNest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .rpcenv.NDArray array = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::rpcenv::NDArray::_InternalParse;
        object = msg->mutable_array();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .rpcenv.ArrayNest vector = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::rpcenv::ArrayNest::_InternalParse;
          object = msg->add_vector();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // map<string, .rpcenv.ArrayNest> map = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::rpcenv::ArrayNest_MapEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->map_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ArrayNest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpcenv.ArrayNest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rpcenv.NDArray array = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .rpcenv.ArrayNest vector = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .rpcenv.ArrayNest> map = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          ArrayNest_MapEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              ArrayNest_MapEntry_DoNotUse,
              ::std::string, ::rpcenv::ArrayNest,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::rpcenv::ArrayNest > > parser(&map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rpcenv.ArrayNest.MapEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpcenv.ArrayNest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpcenv.ArrayNest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ArrayNest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpcenv.ArrayNest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .rpcenv.NDArray array = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::array(this), output);
  }

  // repeated .rpcenv.ArrayNest vector = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vector_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->vector(static_cast<int>(i)),
      output);
  }

  // map<string, .rpcenv.ArrayNest> map = 3;
  if (!this->map().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::rpcenv::ArrayNest >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "rpcenv.ArrayNest.MapEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::rpcenv::ArrayNest >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::rpcenv::ArrayNest >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ArrayNest_MapEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<ArrayNest_MapEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::rpcenv::ArrayNest >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it) {
        entry.reset(map_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpcenv.ArrayNest)
}

::google::protobuf::uint8* ArrayNest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpcenv.ArrayNest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .rpcenv.NDArray array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::array(this), target);
  }

  // repeated .rpcenv.ArrayNest vector = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vector_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->vector(static_cast<int>(i)), target);
  }

  // map<string, .rpcenv.ArrayNest> map = 3;
  if (!this->map().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::rpcenv::ArrayNest >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "rpcenv.ArrayNest.MapEntry.key");
      }
    };

    if (false &&
        this->map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::rpcenv::ArrayNest >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::rpcenv::ArrayNest >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ArrayNest_MapEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<ArrayNest_MapEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::rpcenv::ArrayNest >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it) {
        entry.reset(map_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpcenv.ArrayNest)
  return target;
}

size_t ArrayNest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpcenv.ArrayNest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rpcenv.ArrayNest vector = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->vector_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vector(static_cast<int>(i)));
    }
  }

  // map<string, .rpcenv.ArrayNest> map = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->map_size());
  {
    ::std::unique_ptr<ArrayNest_MapEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::rpcenv::ArrayNest >::const_iterator
        it = this->map().begin();
        it != this->map().end(); ++it) {
      entry.reset(map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // optional .rpcenv.NDArray array = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *array_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArrayNest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpcenv.ArrayNest)
  GOOGLE_DCHECK_NE(&from, this);
  const ArrayNest* source =
      ::google::protobuf::DynamicCastToGenerated<ArrayNest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpcenv.ArrayNest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpcenv.ArrayNest)
    MergeFrom(*source);
  }
}

void ArrayNest::MergeFrom(const ArrayNest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpcenv.ArrayNest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vector_.MergeFrom(from.vector_);
  map_.MergeFrom(from.map_);
  if (from.has_array()) {
    mutable_array()->::rpcenv::NDArray::MergeFrom(from.array());
  }
}

void ArrayNest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpcenv.ArrayNest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayNest::CopyFrom(const ArrayNest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpcenv.ArrayNest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayNest::IsInitialized() const {
  return true;
}

void ArrayNest::Swap(ArrayNest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArrayNest::InternalSwap(ArrayNest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&vector_)->InternalSwap(CastToBase(&other->vector_));
  map_.Swap(&other->map_);
  swap(array_, other->array_);
}

::google::protobuf::Metadata ArrayNest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_rpcenv_2eproto);
  return ::file_level_metadata_rpcenv_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Step::InitAsDefaultInstance() {
  ::rpcenv::_Step_default_instance_._instance.get_mutable()->observation_ = const_cast< ::rpcenv::ArrayNest*>(
      ::rpcenv::ArrayNest::internal_default_instance());
}
class Step::HasBitSetters {
 public:
  static const ::rpcenv::ArrayNest& observation(const Step* msg);
  static void set_has_observation(Step* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_reward(Step* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_done(Step* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_episode_step(Step* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_episode_return(Step* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

const ::rpcenv::ArrayNest&
Step::HasBitSetters::observation(const Step* msg) {
  return *msg->observation_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Step::kObservationFieldNumber;
const int Step::kRewardFieldNumber;
const int Step::kDoneFieldNumber;
const int Step::kEpisodeStepFieldNumber;
const int Step::kEpisodeReturnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Step::Step()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rpcenv.Step)
}
Step::Step(const Step& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_observation()) {
    observation_ = new ::rpcenv::ArrayNest(*from.observation_);
  } else {
    observation_ = nullptr;
  }
  ::memcpy(&reward_, &from.reward_,
    static_cast<size_t>(reinterpret_cast<char*>(&episode_return_) -
    reinterpret_cast<char*>(&reward_)) + sizeof(episode_return_));
  // @@protoc_insertion_point(copy_constructor:rpcenv.Step)
}

void Step::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Step_rpcenv_2eproto.base);
  ::memset(&observation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&episode_return_) -
      reinterpret_cast<char*>(&observation_)) + sizeof(episode_return_));
}

Step::~Step() {
  // @@protoc_insertion_point(destructor:rpcenv.Step)
  SharedDtor();
}

void Step::SharedDtor() {
  if (this != internal_default_instance()) delete observation_;
}

void Step::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Step& Step::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Step_rpcenv_2eproto.base);
  return *internal_default_instance();
}


void Step::Clear() {
// @@protoc_insertion_point(message_clear_start:rpcenv.Step)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(observation_ != nullptr);
    observation_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&reward_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&episode_return_) -
        reinterpret_cast<char*>(&reward_)) + sizeof(episode_return_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Step::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Step*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .rpcenv.ArrayNest observation = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::rpcenv::ArrayNest::_InternalParse;
        object = msg->mutable_observation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional float reward = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_reward(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional bool done = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_done(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 episode_step = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_episode_step(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float episode_return = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_episode_return(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Step::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rpcenv.Step)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rpcenv.ArrayNest observation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_observation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float reward = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_reward(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool done = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_done(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 episode_step = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_episode_step(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &episode_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float episode_return = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_episode_return(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &episode_return_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rpcenv.Step)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rpcenv.Step)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Step::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rpcenv.Step)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .rpcenv.ArrayNest observation = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::observation(this), output);
  }

  // optional float reward = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->reward(), output);
  }

  // optional bool done = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->done(), output);
  }

  // optional int32 episode_step = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->episode_step(), output);
  }

  // optional float episode_return = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->episode_return(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rpcenv.Step)
}

::google::protobuf::uint8* Step::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpcenv.Step)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .rpcenv.ArrayNest observation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::observation(this), target);
  }

  // optional float reward = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->reward(), target);
  }

  // optional bool done = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->done(), target);
  }

  // optional int32 episode_step = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->episode_step(), target);
  }

  // optional float episode_return = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->episode_return(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpcenv.Step)
  return target;
}

size_t Step::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpcenv.Step)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .rpcenv.ArrayNest observation = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *observation_);
    }

    // optional float reward = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool done = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 episode_step = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->episode_step());
    }

    // optional float episode_return = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Step::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpcenv.Step)
  GOOGLE_DCHECK_NE(&from, this);
  const Step* source =
      ::google::protobuf::DynamicCastToGenerated<Step>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpcenv.Step)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpcenv.Step)
    MergeFrom(*source);
  }
}

void Step::MergeFrom(const Step& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpcenv.Step)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_observation()->::rpcenv::ArrayNest::MergeFrom(from.observation());
    }
    if (cached_has_bits & 0x00000002u) {
      reward_ = from.reward_;
    }
    if (cached_has_bits & 0x00000004u) {
      done_ = from.done_;
    }
    if (cached_has_bits & 0x00000008u) {
      episode_step_ = from.episode_step_;
    }
    if (cached_has_bits & 0x00000010u) {
      episode_return_ = from.episode_return_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Step::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpcenv.Step)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Step::CopyFrom(const Step& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpcenv.Step)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Step::IsInitialized() const {
  return true;
}

void Step::Swap(Step* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Step::InternalSwap(Step* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(observation_, other->observation_);
  swap(reward_, other->reward_);
  swap(done_, other->done_);
  swap(episode_step_, other->episode_step_);
  swap(episode_return_, other->episode_return_);
}

::google::protobuf::Metadata Step::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_rpcenv_2eproto);
  return ::file_level_metadata_rpcenv_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rpcenv
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::rpcenv::Action* Arena::CreateMaybeMessage< ::rpcenv::Action >(Arena* arena) {
  return Arena::CreateInternal< ::rpcenv::Action >(arena);
}
template<> PROTOBUF_NOINLINE ::rpcenv::NDArray* Arena::CreateMaybeMessage< ::rpcenv::NDArray >(Arena* arena) {
  return Arena::CreateInternal< ::rpcenv::NDArray >(arena);
}
template<> PROTOBUF_NOINLINE ::rpcenv::ArrayNest_MapEntry_DoNotUse* Arena::CreateMaybeMessage< ::rpcenv::ArrayNest_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::rpcenv::ArrayNest_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::rpcenv::ArrayNest* Arena::CreateMaybeMessage< ::rpcenv::ArrayNest >(Arena* arena) {
  return Arena::CreateInternal< ::rpcenv::ArrayNest >(arena);
}
template<> PROTOBUF_NOINLINE ::rpcenv::Step* Arena::CreateMaybeMessage< ::rpcenv::Step >(Arena* arena) {
  return Arena::CreateInternal< ::rpcenv::Step >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
